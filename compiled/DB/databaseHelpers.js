'use strict';

var api = require('../API/apiHelper.js');
var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/test');
var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function () {
  console.log('now connected');
});

var imageSchema = mongoose.Schema({
  url: String,
  analysis: String
});

var Image = mongoose.model('Image', imageSchema);

module.exports = {

  saveUrlToDatabase: function saveUrlToDatabase(url, callback) {

    api.clarifaiImage(url, function (err, data) {
      if (err) {
        console.log(err);
      }
      var data = JSON.stringify(data);

      var image = new Image({ url: url, analysis: data });

      //update if image url is unique
      Image.findOneAndUpdate({ url: url, analysis: data }, { url: url, analysis: data }, { upsert: true }, function (err, data) {
        if (err) {
          throw err;
        }
        //return all images stored
        Image.find(function (err, allImages) {
          if (err) return console.error(err);
          callback(null, allImages);
        });
      });
    });
  },

  deleteUrlFromDatabase: function deleteUrlFromDatabase(url, callback) {
    Image.findOneAndRemove({ url: url }, function (err, data) {
      if (err) {
        throw err;
      }
      //return all images stored
      Image.find(function (err, allImages) {
        if (err) return console.error(err);
        callback(null, allImages);
      });
    });
  },

  getAllUrls: function getAllUrls(callback) {
    Image.find(function (err, allImages) {
      if (err) return console.error(err);
      callback(null, allImages);
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL0RCL2RhdGFiYXNlSGVscGVycy5qcyJdLCJuYW1lcyI6WyJhcGkiLCJyZXF1aXJlIiwibW9uZ29vc2UiLCJjb25uZWN0IiwiZGIiLCJjb25uZWN0aW9uIiwib24iLCJjb25zb2xlIiwiZXJyb3IiLCJiaW5kIiwib25jZSIsImxvZyIsImltYWdlU2NoZW1hIiwiU2NoZW1hIiwidXJsIiwiU3RyaW5nIiwiYW5hbHlzaXMiLCJJbWFnZSIsIm1vZGVsIiwibW9kdWxlIiwiZXhwb3J0cyIsInNhdmVVcmxUb0RhdGFiYXNlIiwiY2FsbGJhY2siLCJjbGFyaWZhaUltYWdlIiwiZXJyIiwiZGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbWFnZSIsImZpbmRPbmVBbmRVcGRhdGUiLCJ1cHNlcnQiLCJmaW5kIiwiYWxsSW1hZ2VzIiwiZGVsZXRlVXJsRnJvbURhdGFiYXNlIiwiZmluZE9uZUFuZFJlbW92ZSIsImdldEFsbFVybHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsTUFBTUMsUUFBUSxxQkFBUixDQUFaO0FBQ0EsSUFBSUMsV0FBV0QsUUFBUSxVQUFSLENBQWY7QUFDQUMsU0FBU0MsT0FBVCxDQUFpQiwwQkFBakI7QUFDQSxJQUFJQyxLQUFLRixTQUFTRyxVQUFsQjtBQUNBRCxHQUFHRSxFQUFILENBQU0sT0FBTixFQUFlQyxRQUFRQyxLQUFSLENBQWNDLElBQWQsQ0FBbUJGLE9BQW5CLEVBQTRCLG1CQUE1QixDQUFmO0FBQ0FILEdBQUdNLElBQUgsQ0FBUSxNQUFSLEVBQWdCLFlBQVc7QUFDekJILFVBQVFJLEdBQVIsQ0FBWSxlQUFaO0FBQ0QsQ0FGRDs7QUFRQSxJQUFJQyxjQUFjVixTQUFTVyxNQUFULENBQWdCO0FBQzlCQyxPQUFLQyxNQUR5QjtBQUU5QkMsWUFBVUQ7QUFGb0IsQ0FBaEIsQ0FBbEI7O0FBS0EsSUFBSUUsUUFBUWYsU0FBU2dCLEtBQVQsQ0FBZSxPQUFmLEVBQXdCTixXQUF4QixDQUFaOztBQUVBTyxPQUFPQyxPQUFQLEdBQWlCOztBQUVmQyxxQkFBbUIsMkJBQVNQLEdBQVQsRUFBY1EsUUFBZCxFQUF3Qjs7QUFFekN0QixRQUFJdUIsYUFBSixDQUFrQlQsR0FBbEIsRUFBdUIsVUFBQ1UsR0FBRCxFQUFNQyxJQUFOLEVBQWU7QUFDcEMsVUFBSUQsR0FBSixFQUFRO0FBQ05qQixnQkFBUUksR0FBUixDQUFZYSxHQUFaO0FBQ0Q7QUFDRCxVQUFJQyxPQUFPQyxLQUFLQyxTQUFMLENBQWVGLElBQWYsQ0FBWDs7QUFFQSxVQUFJRyxRQUFRLElBQUlYLEtBQUosQ0FBVSxFQUFDSCxLQUFLQSxHQUFOLEVBQVdFLFVBQVVTLElBQXJCLEVBQVYsQ0FBWjs7QUFFQTtBQUNBUixZQUFNWSxnQkFBTixDQUNFLEVBQUVmLEtBQUtBLEdBQVAsRUFBWUUsVUFBVVMsSUFBdEIsRUFERixFQUVFLEVBQUVYLEtBQUtBLEdBQVAsRUFBWUUsVUFBVVMsSUFBdEIsRUFGRixFQUdFLEVBQUNLLFFBQVEsSUFBVCxFQUhGLEVBSUUsVUFBQ04sR0FBRCxFQUFNQyxJQUFOLEVBQWU7QUFDYixZQUFJRCxHQUFKLEVBQVM7QUFDUCxnQkFBTUEsR0FBTjtBQUNEO0FBQ0Q7QUFDQVAsY0FBTWMsSUFBTixDQUFXLFVBQVVQLEdBQVYsRUFBZVEsU0FBZixFQUEwQjtBQUNuQyxjQUFJUixHQUFKLEVBQVMsT0FBT2pCLFFBQVFDLEtBQVIsQ0FBY2dCLEdBQWQsQ0FBUDtBQUNURixtQkFBUyxJQUFULEVBQWVVLFNBQWY7QUFDRCxTQUhEO0FBSUgsT0FiRDtBQWNELEtBdkJEO0FBd0JELEdBNUJjOztBQThCZkMseUJBQXVCLCtCQUFTbkIsR0FBVCxFQUFjUSxRQUFkLEVBQXdCO0FBQzdDTCxVQUFNaUIsZ0JBQU4sQ0FDRSxFQUFDcEIsS0FBS0EsR0FBTixFQURGLEVBRUUsVUFBQ1UsR0FBRCxFQUFNQyxJQUFOLEVBQWU7QUFDYixVQUFJRCxHQUFKLEVBQVM7QUFDUCxjQUFNQSxHQUFOO0FBQ0Q7QUFDRDtBQUNBUCxZQUFNYyxJQUFOLENBQVcsVUFBVVAsR0FBVixFQUFlUSxTQUFmLEVBQTBCO0FBQ25DLFlBQUlSLEdBQUosRUFBUyxPQUFPakIsUUFBUUMsS0FBUixDQUFjZ0IsR0FBZCxDQUFQO0FBQ1RGLGlCQUFTLElBQVQsRUFBZVUsU0FBZjtBQUNELE9BSEQ7QUFJSCxLQVhEO0FBWUQsR0EzQ2M7O0FBNkNmRyxjQUFZLG9CQUFTYixRQUFULEVBQW1CO0FBQzdCTCxVQUFNYyxJQUFOLENBQVcsVUFBVVAsR0FBVixFQUFlUSxTQUFmLEVBQTBCO0FBQ25DLFVBQUlSLEdBQUosRUFBUyxPQUFPakIsUUFBUUMsS0FBUixDQUFjZ0IsR0FBZCxDQUFQO0FBQ1BGLGVBQVMsSUFBVCxFQUFlVSxTQUFmO0FBQ0QsS0FISDtBQUlEO0FBbERjLENBQWpCIiwiZmlsZSI6ImRhdGFiYXNlSGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGFwaSA9IHJlcXVpcmUoJy4uL0FQSS9hcGlIZWxwZXIuanMnKTtcbnZhciBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5tb25nb29zZS5jb25uZWN0KCdtb25nb2RiOi8vbG9jYWxob3N0L3Rlc3QnKTtcbnZhciBkYiA9IG1vbmdvb3NlLmNvbm5lY3Rpb247XG5kYi5vbignZXJyb3InLCBjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSwgJ2Nvbm5lY3Rpb24gZXJyb3I6JykpO1xuZGIub25jZSgnb3BlbicsIGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnbm93IGNvbm5lY3RlZCcpO1xufSk7XG5cblxuXG5cblxudmFyIGltYWdlU2NoZW1hID0gbW9uZ29vc2UuU2NoZW1hKHtcbiAgICB1cmw6IFN0cmluZyxcbiAgICBhbmFseXNpczogU3RyaW5nXG59KTtcblxudmFyIEltYWdlID0gbW9uZ29vc2UubW9kZWwoJ0ltYWdlJywgaW1hZ2VTY2hlbWEpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBzYXZlVXJsVG9EYXRhYmFzZTogZnVuY3Rpb24odXJsLCBjYWxsYmFjaykge1xuXG4gICAgYXBpLmNsYXJpZmFpSW1hZ2UodXJsLCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICBpZiAoZXJyKXtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcblxuICAgICAgdmFyIGltYWdlID0gbmV3IEltYWdlKHt1cmw6IHVybCwgYW5hbHlzaXM6IGRhdGF9KTtcblxuICAgICAgLy91cGRhdGUgaWYgaW1hZ2UgdXJsIGlzIHVuaXF1ZVxuICAgICAgSW1hZ2UuZmluZE9uZUFuZFVwZGF0ZShcbiAgICAgICAgeyB1cmw6IHVybCwgYW5hbHlzaXM6IGRhdGF9LFxuICAgICAgICB7IHVybDogdXJsLCBhbmFseXNpczogZGF0YX0sXG4gICAgICAgIHt1cHNlcnQ6IHRydWV9LFxuICAgICAgICAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgdGhyb3cgZXJyXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vcmV0dXJuIGFsbCBpbWFnZXMgc3RvcmVkXG4gICAgICAgICAgSW1hZ2UuZmluZChmdW5jdGlvbiAoZXJyLCBhbGxJbWFnZXMpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBhbGxJbWFnZXMpXG4gICAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgIH0pXG4gIH0sXG5cbiAgZGVsZXRlVXJsRnJvbURhdGFiYXNlOiBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKSB7XG4gICAgSW1hZ2UuZmluZE9uZUFuZFJlbW92ZShcbiAgICAgIHt1cmw6IHVybH0sXG4gICAgICAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICB0aHJvdyBlcnJcbiAgICAgICAgfVxuICAgICAgICAvL3JldHVybiBhbGwgaW1hZ2VzIHN0b3JlZFxuICAgICAgICBJbWFnZS5maW5kKGZ1bmN0aW9uIChlcnIsIGFsbEltYWdlcykge1xuICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgY2FsbGJhY2sobnVsbCwgYWxsSW1hZ2VzKVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfSxcblxuICBnZXRBbGxVcmxzOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIEltYWdlLmZpbmQoZnVuY3Rpb24gKGVyciwgYWxsSW1hZ2VzKSB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICBjYWxsYmFjayhudWxsLCBhbGxJbWFnZXMpXG4gICAgICB9KTtcbiAgfVxufVxuXG5cblxuXG5cblxuXG5cblxuXG4iXX0=